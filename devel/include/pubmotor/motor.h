// Generated by gencpp from file pubmotor/motor.msg
// DO NOT EDIT!


#ifndef PUBMOTOR_MESSAGE_MOTOR_H
#define PUBMOTOR_MESSAGE_MOTOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pubmotor
{
template <class ContainerAllocator>
struct motor_
{
  typedef motor_<ContainerAllocator> Type;

  motor_()
    : id()
    , velocity(0.0)
    , acceleration(0.0)
    , position(0.0)  {
    }
  motor_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , velocity(0.0)
    , acceleration(0.0)
    , position(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _acceleration_type;
  _acceleration_type acceleration;

   typedef float _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::pubmotor::motor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pubmotor::motor_<ContainerAllocator> const> ConstPtr;

}; // struct motor_

typedef ::pubmotor::motor_<std::allocator<void> > motor;

typedef boost::shared_ptr< ::pubmotor::motor > motorPtr;
typedef boost::shared_ptr< ::pubmotor::motor const> motorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pubmotor::motor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pubmotor::motor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pubmotor::motor_<ContainerAllocator1> & lhs, const ::pubmotor::motor_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.velocity == rhs.velocity &&
    lhs.acceleration == rhs.acceleration &&
    lhs.position == rhs.position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pubmotor::motor_<ContainerAllocator1> & lhs, const ::pubmotor::motor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pubmotor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pubmotor::motor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pubmotor::motor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pubmotor::motor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pubmotor::motor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pubmotor::motor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pubmotor::motor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pubmotor::motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db2e79cc54e53959364c0e43a9d2ea58";
  }

  static const char* value(const ::pubmotor::motor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb2e79cc54e53959ULL;
  static const uint64_t static_value2 = 0x364c0e43a9d2ea58ULL;
};

template<class ContainerAllocator>
struct DataType< ::pubmotor::motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pubmotor/motor";
  }

  static const char* value(const ::pubmotor::motor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pubmotor::motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"float32 velocity \n"
"float32 acceleration\n"
"float32 position\n"
;
  }

  static const char* value(const ::pubmotor::motor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pubmotor::motor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.velocity);
      stream.next(m.acceleration);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pubmotor::motor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pubmotor::motor_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration);
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PUBMOTOR_MESSAGE_MOTOR_H
